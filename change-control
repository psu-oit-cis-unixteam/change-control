#!/usr/bin/env python
"""
Use the RT REST API to retrieve contemporary change-control tickets.

Refer: http://wiki.bestpractical.com/view/REST

TODO:
    Write docstrings
"""

import sys
import getpass
import textwrap
import urllib
import urllib2
from datetime import date, timedelta
from optparse import OptionParser
from smtplib import SMTP

__author__  = "Max Parmer"
__email__   = "maxp@pdx.edu"

MON, TUE, WED, THU, FRI, SAT, SUN = range(7)

RT_BASE             = 'https://support.oit.pdx.edu'
RT_API              = RT_BASE + '/NoAuth-REST/1.0'
RT_SEARCH           = RT_API + '/search/ticket?%s'
RT_SHOW             = RT_API + '/%s/show'
RT_TICKET_URL       = RT_BASE + '/Ticket/Display.html?id=%s'
#RT_INDENT is the signifier of a multiline field in (l)ong format
RT_INDENT           = "    "
CURRENT_WEEK_QUERY  = "Created < '%s 15:00:00' AND Starts > '%s 15:00:00' AND Starts < '%s 15:00:00' AND Queue='change-control' AND (Status = 'new' OR Status = 'open')"
UPCOMING_QUERY      = "Starts > '%s 15:00:00' AND Queue='change-control' AND (Status = 'new' OR Status = 'open')"
DEFAULT_DOMAIN      = "pdx.edu"
MAILHOST            = "mailhost.pdx.edu"

CC_MESSAGE          = """To: %(to_addr)s
Subject: Change Control Items for %(date)s

%(message)s
"""

CC_PREAMBLE         = """If you submitted a change that is not in this week's list, please make
sure you entered a valid Start date.  For more information on the Change
Control process see:

http://www.pdx.edu/oit/policies

%(changes)s

======[ Future Changes ]===============


%(future_changes)s

"""

CC_BODY             = """------[ %(id)s ]-----------------------
Subject: %(Subject)s
Requester: %(Requestors)s
Start Time: %(Starts)s
Duration: %(CF.{CC_Duration})s
Status: %(Status)s
Type: %(CF.{CC_Type})s
Ticket: %(link)s

Public Description:
%(CF.{CC_Public_Description})s

Customer Impact:
%(CF.{CC_Customer_Impact})s

"""

def fetch(url, credentials):
    """Fetch a URL, trim the header and return the result as str."""
    username, password = credentials
    ldata = urllib.urlencode({'user': username, 'pass': password})
    login = urllib2.Request(url, ldata)
    try:
        responder   = urllib2.urlopen(login)
        response    = responder.read()
        responder.close()
        return trim_header(response)
    except urllib2.URLError:
        sys.exit("Failed to contact RT while fetching %s" % url)

def search(query, orderby, credentials, format="i"):
    """Build an RT query string.

    query:  your RT style pseudo-SQL query

    orderby: Any RT key. Can be prefixed with + or -, i.e. -Created
         would list tickets in descending order by creation.
    format: i: ticket/<ticket-id> (good for further queries)
        s: <ticket-id>: <ticket-subject>
        l: all ticket attributes
    """
    query = urllib.urlencode({  'query':    query,
                    'orderby':  orderby,
                    'format':   format,
                })
    return fetch(RT_SEARCH % query, credentials)

def show(ticket, credentials):
    """Perform a query to retrieve the full details of a ticket.

    ticket: A reference to an RT ticket, i.e.: ticket/1234567
    """
    return fetch(RT_SHOW % ticket, credentials)

def trim_header(response):
    """Remove the RT response header, which is a statusline and newline."""
    response = response.splitlines()
    return response[2:]

def row_split(row):
    """Split rows into fields"""
    row = row.partition(":")
    if "CF-" in row[0]: #strip CF- marker since it complicates templating
        return row[0][3::], row[2].strip()
    else:
        return row[0], row[2].strip()

def ticket_to_dict(ticket):
    """Parse a ticket and it's fields to a dict for later fun."""
    ticket_dict = dict()
    for index, row in enumerate(ticket):
        if row is RT_INDENT: pass
        elif row is "": pass
        elif RT_INDENT in row:
            #append to the last named field
            key, value = row_split(ticket[last_known_field])
            ticket_dict[key] = ticket_dict[key] + " " + row.strip()
        else:
            #strip ticket/ to present this in the historical way
            if "id: " in row: row = row.replace("ticket/", "")
            #wrap and store in dict
            key, value = row_split(row)
            ticket_dict[key] = textwrap.fill(value)
            last_known_field = index
            
    ticket_dict['link'] = RT_TICKET_URL % ticket_dict['id']
    return ticket_dict

def format_tickets(tickets, body, credentials, ticket_format=CC_BODY):
    """Iterate through a list of tickets and apply the ticket_format to them."""
    for ticket in tickets:
        ticket = ticket_to_dict(show(ticket, credentials))
        body += ticket_format % ticket
    return body

def make_message(query, upcoming_query, credentials, orderby="+Starts"):
    """Run the specified queries and template them into a message."""
    changes, future_changes = str(), str()
    this_week = search(query, orderby, credentials)
    next_week = search(upcoming_query, orderby, credentials)
    changes = format_tickets(this_week, changes, credentials)
    if len(next_week) > 0:
        future_changes = format_tickets(next_week, future_changes, credentials)
    else:
        future_changes = "None scheduled."
    return CC_PREAMBLE % {'changes': changes, 'future_changes': future_changes}

def make_mail(to_addr, change_date, message):
    """Attach To: and Subject: headers to the change-control message."""
    return CC_MESSAGE % {'to_addr': to_addr, 'date': change_date, 'message': message}

def send_mail(from_addr, to_addr, content, server=MAILHOST):
    """Send an email."""
    server = SMTP(server)
    server.sendmail(from_addr, to_addr, content)
    server.quit()

def next_change_days(today, change_day):
    """Calculate the next change day."""
    delta = change_day - today.weekday()
    if delta < 0:   # then it's the next week.
        delta = delta + 7
    soonest_day = today + timedelta(days=delta)
    next_day = soonest_day + timedelta(days=7)
    return (soonest_day, next_day)

def main():
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-d", dest="day", default=THU, help="Day of the week for change control, i.e. Monday is 0, Tuesday is 1, default: %default")
    parser.add_option("-u", dest="user", default=getpass.getuser(), help="RT username, defaults to current user: %default")
    parser.add_option("-p", dest="password", help="RT password")
    parser.add_option("-t", dest="to_addr", default=False, help="Email address to send mail to, default: print to stdout.")
    parser.add_option("-f", dest="from_addr", default=False, help="Mail origin, default: %default.")
    parser.add_option("-s", action="store_false", dest="echo", default=True, help="Silence output.")
    
    (options, args) = parser.parse_args()

    #seed the date info
    (soonest_day, next_day) = next_change_days(date.today(), int(options.day))
    query = CURRENT_WEEK_QUERY % (date.today(), soonest_day, next_day)
    upcoming_query = UPCOMING_QUERY % next_day
    
    #print these first 'cause make_mail() is going to take a minute
    if options.echo:
        print query
        print upcoming_query
    if options.echo and options.to_addr:
        print "Sending mail to:", options.to_addr
    
    #get password and open a session    
    if not options.password:
        password = getpass.getpass("Password for %s on %s: " % (options.user, RT_BASE))
    else: password = options.password

    credentials = (options.user, password)
    
    #generate the message
    message = make_message(query, upcoming_query, credentials)
    
    if options.echo:
        print message
    if options.to_addr and options.from_addr:
        mail = make_mail(options.to_addr, soonest_day, message)
        send_mail(options.from_addr, options.to_addr, mail)

if __name__ == "__main__":
        main()
